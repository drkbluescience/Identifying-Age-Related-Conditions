{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":52784,"databundleVersionId":5687476,"sourceType":"competition"}],"dockerImageVersionId":30527,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/enisezengin/identifying-age-related-conditions?scriptVersionId=173369305\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, KNNImputer\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV, StratifiedKFold, StratifiedGroupKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import RandomOverSampler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import log_loss, make_scorer\nimport os\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# Set Matplotlib defaults\nplt.rcParams['figure.figsize'] = [6,6]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:38.83083Z","iopub.execute_input":"2024-04-22T15:05:38.831311Z","iopub.status.idle":"2024-04-22T15:05:40.947994Z","shell.execute_reply.started":"2024-04-22T15:05:38.831276Z","shell.execute_reply":"2024-04-22T15:05:40.947017Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n","output_type":"stream"}]},{"cell_type":"code","source":"all_data = {}\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        data_name = filename.split(\".\")[0]\n        data = pd.read_csv(os.path.join(dirname, filename))\n        print(f\"{data_name} shape is {data.shape}\")\n        \n        all_data[data_name] = data\n        \n        \ntrain_df = all_data[\"train\"]\ntest_df = all_data[\"test\"]\ngreeks_df = all_data[\"greeks\"]\n\ntrain_df['EJ']= train_df['EJ'].astype(\"category\")\ntest_df['EJ']= test_df['EJ'].astype(\"category\")","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:40.950501Z","iopub.execute_input":"2024-04-22T15:05:40.951311Z","iopub.status.idle":"2024-04-22T15:05:41.031829Z","shell.execute_reply.started":"2024-04-22T15:05:40.951267Z","shell.execute_reply":"2024-04-22T15:05:41.030328Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"sample_submission shape is (5, 3)\ngreeks shape is (617, 6)\ntrain shape is (617, 58)\ntest shape is (5, 57)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.033139Z","iopub.execute_input":"2024-04-22T15:05:41.033497Z","iopub.status.idle":"2024-04-22T15:05:41.076711Z","shell.execute_reply.started":"2024-04-22T15:05:41.033467Z","shell.execute_reply":"2024-04-22T15:05:41.075262Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"             Id        AB          AF          AH         AM        AR  \\\n0  000ff2bfdfe9  0.209377  3109.03329   85.200147  22.394407  8.138688   \n1  007255e47698  0.145282   978.76416   85.200147  36.968889  8.138688   \n2  013f2bd269f5  0.470030  2635.10654   85.200147  32.360553  8.138688   \n3  043ac50845d5  0.252107  3819.65177  120.201618  77.112203  8.138688   \n4  044fb8a146ec  0.380297  3733.04844   85.200147  14.103738  8.138688   \n\n         AX        AY         AZ          BC  ...        FL        FR  \\\n0  0.699861  0.025578   9.812214    5.555634  ...  7.298162   1.73855   \n1  3.632190  0.025578  13.517790    1.229900  ...  0.173229   0.49706   \n2  6.732840  0.025578  12.824570    1.229900  ...  7.709560   0.97556   \n3  3.685344  0.025578  11.053708    1.229900  ...  6.122162   0.49706   \n4  3.942255  0.054810   3.396778  102.151980  ...  8.153058  48.50134   \n\n         FS         GB          GE            GF         GH         GI  \\\n0  0.094822  11.339138   72.611063   2003.810319  22.136229  69.834944   \n1  0.568932   9.292698   72.611063  27981.562750  29.135430  32.131996   \n2  1.198821  37.077772   88.609437  13676.957810  28.022851  35.192676   \n3  0.284466  18.529584   82.416803   2094.262452  39.948656  90.493248   \n4  0.121914  16.408728  146.109943   8524.370502  45.381316  36.262628   \n\n          GL  Class  \n0   0.120343      1  \n1  21.978000      0  \n2   0.196941      0  \n3   0.155829      0  \n4   0.096614      1  \n\n[5 rows x 58 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>AB</th>\n      <th>AF</th>\n      <th>AH</th>\n      <th>AM</th>\n      <th>AR</th>\n      <th>AX</th>\n      <th>AY</th>\n      <th>AZ</th>\n      <th>BC</th>\n      <th>...</th>\n      <th>FL</th>\n      <th>FR</th>\n      <th>FS</th>\n      <th>GB</th>\n      <th>GE</th>\n      <th>GF</th>\n      <th>GH</th>\n      <th>GI</th>\n      <th>GL</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>000ff2bfdfe9</td>\n      <td>0.209377</td>\n      <td>3109.03329</td>\n      <td>85.200147</td>\n      <td>22.394407</td>\n      <td>8.138688</td>\n      <td>0.699861</td>\n      <td>0.025578</td>\n      <td>9.812214</td>\n      <td>5.555634</td>\n      <td>...</td>\n      <td>7.298162</td>\n      <td>1.73855</td>\n      <td>0.094822</td>\n      <td>11.339138</td>\n      <td>72.611063</td>\n      <td>2003.810319</td>\n      <td>22.136229</td>\n      <td>69.834944</td>\n      <td>0.120343</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>007255e47698</td>\n      <td>0.145282</td>\n      <td>978.76416</td>\n      <td>85.200147</td>\n      <td>36.968889</td>\n      <td>8.138688</td>\n      <td>3.632190</td>\n      <td>0.025578</td>\n      <td>13.517790</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>0.173229</td>\n      <td>0.49706</td>\n      <td>0.568932</td>\n      <td>9.292698</td>\n      <td>72.611063</td>\n      <td>27981.562750</td>\n      <td>29.135430</td>\n      <td>32.131996</td>\n      <td>21.978000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>013f2bd269f5</td>\n      <td>0.470030</td>\n      <td>2635.10654</td>\n      <td>85.200147</td>\n      <td>32.360553</td>\n      <td>8.138688</td>\n      <td>6.732840</td>\n      <td>0.025578</td>\n      <td>12.824570</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>7.709560</td>\n      <td>0.97556</td>\n      <td>1.198821</td>\n      <td>37.077772</td>\n      <td>88.609437</td>\n      <td>13676.957810</td>\n      <td>28.022851</td>\n      <td>35.192676</td>\n      <td>0.196941</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>043ac50845d5</td>\n      <td>0.252107</td>\n      <td>3819.65177</td>\n      <td>120.201618</td>\n      <td>77.112203</td>\n      <td>8.138688</td>\n      <td>3.685344</td>\n      <td>0.025578</td>\n      <td>11.053708</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>6.122162</td>\n      <td>0.49706</td>\n      <td>0.284466</td>\n      <td>18.529584</td>\n      <td>82.416803</td>\n      <td>2094.262452</td>\n      <td>39.948656</td>\n      <td>90.493248</td>\n      <td>0.155829</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>044fb8a146ec</td>\n      <td>0.380297</td>\n      <td>3733.04844</td>\n      <td>85.200147</td>\n      <td>14.103738</td>\n      <td>8.138688</td>\n      <td>3.942255</td>\n      <td>0.054810</td>\n      <td>3.396778</td>\n      <td>102.151980</td>\n      <td>...</td>\n      <td>8.153058</td>\n      <td>48.50134</td>\n      <td>0.121914</td>\n      <td>16.408728</td>\n      <td>146.109943</td>\n      <td>8524.370502</td>\n      <td>45.381316</td>\n      <td>36.262628</td>\n      <td>0.096614</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 58 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"greeks_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.080363Z","iopub.execute_input":"2024-04-22T15:05:41.080986Z","iopub.status.idle":"2024-04-22T15:05:41.106448Z","shell.execute_reply.started":"2024-04-22T15:05:41.080949Z","shell.execute_reply":"2024-04-22T15:05:41.105447Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 617 entries, 0 to 616\nData columns (total 6 columns):\n #   Column   Non-Null Count  Dtype \n---  ------   --------------  ----- \n 0   Id       617 non-null    object\n 1   Alpha    617 non-null    object\n 2   Beta     617 non-null    object\n 3   Gamma    617 non-null    object\n 4   Delta    617 non-null    object\n 5   Epsilon  617 non-null    object\ndtypes: object(6)\nmemory usage: 29.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"# percentage of missing data\ndef missing_columns(df):\n    columns_ = list(df.columns)\n    drop_list = []\n    for col in columns_:\n        percent = df[col].isnull().mean()\n        if percent != 0.0:\n            print(df[col].dtype, end=\", \")\n            print(f\"{col}: {percent}\")\nmissing_columns(train_df)\nprint(\"------\")\nmissing_columns(test_df)\nprint(\"------\")\nmissing_columns(greeks_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.107601Z","iopub.execute_input":"2024-04-22T15:05:41.108624Z","iopub.status.idle":"2024-04-22T15:05:41.145598Z","shell.execute_reply.started":"2024-04-22T15:05:41.108587Z","shell.execute_reply":"2024-04-22T15:05:41.143822Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"float64, BQ: 0.09724473257698542\nfloat64, CB: 0.0032414910858995136\nfloat64, CC: 0.004862236628849271\nfloat64, DU: 0.0016207455429497568\nfloat64, EL: 0.09724473257698542\nfloat64, FC: 0.0016207455429497568\nfloat64, FL: 0.0016207455429497568\nfloat64, FS: 0.0032414910858995136\nfloat64, GL: 0.0016207455429497568\n------\n------\n","output_type":"stream"}]},{"cell_type":"code","source":"def imputation(df):\n\n    imputer = IterativeImputer(missing_values=np.nan,\n                            random_state=0,\n                            n_nearest_features=3,\n                            max_iter=1,\n                            sample_posterior=True,)\n\n    df_imp = imputer.fit_transform(df)\n    df = pd.DataFrame(df_imp, columns=df.columns.tolist())\n\n    return df\n# y = train_df['Class']\n# train_df.drop(columns='Class', inplace=True)\ntrain_num = imputation(train_df[[col for col in train_df.select_dtypes(\"number\")]])\ntrain_cat = train_df[[col for col in train_df.select_dtypes([\"category\", \"object\"])]]\ntrain_df = pd.concat([train_cat, train_num], axis=1)\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.147427Z","iopub.execute_input":"2024-04-22T15:05:41.147939Z","iopub.status.idle":"2024-04-22T15:05:41.3387Z","shell.execute_reply.started":"2024-04-22T15:05:41.147895Z","shell.execute_reply":"2024-04-22T15:05:41.337515Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"             Id EJ        AB          AF          AH         AM        AR  \\\n0  000ff2bfdfe9  B  0.209377  3109.03329   85.200147  22.394407  8.138688   \n1  007255e47698  A  0.145282   978.76416   85.200147  36.968889  8.138688   \n2  013f2bd269f5  B  0.470030  2635.10654   85.200147  32.360553  8.138688   \n3  043ac50845d5  B  0.252107  3819.65177  120.201618  77.112203  8.138688   \n4  044fb8a146ec  B  0.380297  3733.04844   85.200147  14.103738  8.138688   \n\n         AX        AY         AZ  ...        FL        FR        FS  \\\n0  0.699861  0.025578   9.812214  ...  7.298162   1.73855  0.094822   \n1  3.632190  0.025578  13.517790  ...  0.173229   0.49706  0.568932   \n2  6.732840  0.025578  12.824570  ...  7.709560   0.97556  1.198821   \n3  3.685344  0.025578  11.053708  ...  6.122162   0.49706  0.284466   \n4  3.942255  0.054810   3.396778  ...  8.153058  48.50134  0.121914   \n\n          GB          GE            GF         GH         GI         GL  Class  \n0  11.339138   72.611063   2003.810319  22.136229  69.834944   0.120343    1.0  \n1   9.292698   72.611063  27981.562750  29.135430  32.131996  21.978000    0.0  \n2  37.077772   88.609437  13676.957810  28.022851  35.192676   0.196941    0.0  \n3  18.529584   82.416803   2094.262452  39.948656  90.493248   0.155829    0.0  \n4  16.408728  146.109943   8524.370502  45.381316  36.262628   0.096614    1.0  \n\n[5 rows x 58 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>EJ</th>\n      <th>AB</th>\n      <th>AF</th>\n      <th>AH</th>\n      <th>AM</th>\n      <th>AR</th>\n      <th>AX</th>\n      <th>AY</th>\n      <th>AZ</th>\n      <th>...</th>\n      <th>FL</th>\n      <th>FR</th>\n      <th>FS</th>\n      <th>GB</th>\n      <th>GE</th>\n      <th>GF</th>\n      <th>GH</th>\n      <th>GI</th>\n      <th>GL</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>000ff2bfdfe9</td>\n      <td>B</td>\n      <td>0.209377</td>\n      <td>3109.03329</td>\n      <td>85.200147</td>\n      <td>22.394407</td>\n      <td>8.138688</td>\n      <td>0.699861</td>\n      <td>0.025578</td>\n      <td>9.812214</td>\n      <td>...</td>\n      <td>7.298162</td>\n      <td>1.73855</td>\n      <td>0.094822</td>\n      <td>11.339138</td>\n      <td>72.611063</td>\n      <td>2003.810319</td>\n      <td>22.136229</td>\n      <td>69.834944</td>\n      <td>0.120343</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>007255e47698</td>\n      <td>A</td>\n      <td>0.145282</td>\n      <td>978.76416</td>\n      <td>85.200147</td>\n      <td>36.968889</td>\n      <td>8.138688</td>\n      <td>3.632190</td>\n      <td>0.025578</td>\n      <td>13.517790</td>\n      <td>...</td>\n      <td>0.173229</td>\n      <td>0.49706</td>\n      <td>0.568932</td>\n      <td>9.292698</td>\n      <td>72.611063</td>\n      <td>27981.562750</td>\n      <td>29.135430</td>\n      <td>32.131996</td>\n      <td>21.978000</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>013f2bd269f5</td>\n      <td>B</td>\n      <td>0.470030</td>\n      <td>2635.10654</td>\n      <td>85.200147</td>\n      <td>32.360553</td>\n      <td>8.138688</td>\n      <td>6.732840</td>\n      <td>0.025578</td>\n      <td>12.824570</td>\n      <td>...</td>\n      <td>7.709560</td>\n      <td>0.97556</td>\n      <td>1.198821</td>\n      <td>37.077772</td>\n      <td>88.609437</td>\n      <td>13676.957810</td>\n      <td>28.022851</td>\n      <td>35.192676</td>\n      <td>0.196941</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>043ac50845d5</td>\n      <td>B</td>\n      <td>0.252107</td>\n      <td>3819.65177</td>\n      <td>120.201618</td>\n      <td>77.112203</td>\n      <td>8.138688</td>\n      <td>3.685344</td>\n      <td>0.025578</td>\n      <td>11.053708</td>\n      <td>...</td>\n      <td>6.122162</td>\n      <td>0.49706</td>\n      <td>0.284466</td>\n      <td>18.529584</td>\n      <td>82.416803</td>\n      <td>2094.262452</td>\n      <td>39.948656</td>\n      <td>90.493248</td>\n      <td>0.155829</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>044fb8a146ec</td>\n      <td>B</td>\n      <td>0.380297</td>\n      <td>3733.04844</td>\n      <td>85.200147</td>\n      <td>14.103738</td>\n      <td>8.138688</td>\n      <td>3.942255</td>\n      <td>0.054810</td>\n      <td>3.396778</td>\n      <td>...</td>\n      <td>8.153058</td>\n      <td>48.50134</td>\n      <td>0.121914</td>\n      <td>16.408728</td>\n      <td>146.109943</td>\n      <td>8524.370502</td>\n      <td>45.381316</td>\n      <td>36.262628</td>\n      <td>0.096614</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 58 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n# greeks.loc[greeks[\"Alpha\"] == \"D\", \"Alpha\"] = 'B'\n# greeks.loc[greeks[\"Alpha\"] == \"G\", \"Alpha\"] = 'B'\n\n# train_df['EJ']= train_df['EJ'].astype(\"category\")\ndf_imputed = pd.merge(train_df, greeks_df[['Id','Alpha', 'Beta', 'Gamma', 'Delta']].astype(\"category\"), how='left', on='Id')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.340365Z","iopub.execute_input":"2024-04-22T15:05:41.341101Z","iopub.status.idle":"2024-04-22T15:05:41.362971Z","shell.execute_reply.started":"2024-04-22T15:05:41.341059Z","shell.execute_reply":"2024-04-22T15:05:41.361991Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# sns.countplot(x = 'Class', data=pd.DataFrame(data=y, columns=['Class']))\nsns.countplot(x = 'Class', data=df_imputed)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.364097Z","iopub.execute_input":"2024-04-22T15:05:41.364726Z","iopub.status.idle":"2024-04-22T15:05:41.609825Z","shell.execute_reply.started":"2024-04-22T15:05:41.364694Z","shell.execute_reply":"2024-04-22T15:05:41.608563Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Class', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"neg, pos = np.bincount(df_imputed['Class'])\ntotal = neg + pos\nprint('Examples:\\n    Total: {}\\n    Positive: {} ({:.2f}% of total)\\n'.format(\n    total, pos, 100 * pos / total))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.611806Z","iopub.execute_input":"2024-04-22T15:05:41.612188Z","iopub.status.idle":"2024-04-22T15:05:41.61861Z","shell.execute_reply.started":"2024-04-22T15:05:41.612156Z","shell.execute_reply":"2024-04-22T15:05:41.617378Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Examples:\n    Total: 617\n    Positive: 108 (17.50% of total)\n\n","output_type":"stream"}]},{"cell_type":"code","source":"one_df = df_imputed.loc[df_imputed['Class'] == 1] \n    # Choose the samples with class label `0`.\nzero_df = df_imputed.loc[df_imputed['Class'] == 0]\nprint(one_df.shape)\nprint(zero_df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.62366Z","iopub.execute_input":"2024-04-22T15:05:41.624088Z","iopub.status.idle":"2024-04-22T15:05:41.634737Z","shell.execute_reply.started":"2024-04-22T15:05:41.624052Z","shell.execute_reply":"2024-04-22T15:05:41.633504Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"(108, 62)\n(509, 62)\n","output_type":"stream"}]},{"cell_type":"code","source":"X = df_imputed.copy()\ny = X['Class']\nX.drop('Class', axis=1, inplace=True)\n\nros = RandomOverSampler(random_state=0)\nX_resampled, y_resampled = ros.fit_resample(X, y)\nX_resampled['Class'] = y_resampled","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.636107Z","iopub.execute_input":"2024-04-22T15:05:41.636551Z","iopub.status.idle":"2024-04-22T15:05:41.675417Z","shell.execute_reply.started":"2024-04-22T15:05:41.636495Z","shell.execute_reply":"2024-04-22T15:05:41.674333Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x = 'Class', data=X_resampled)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.676792Z","iopub.execute_input":"2024-04-22T15:05:41.677187Z","iopub.status.idle":"2024-04-22T15:05:41.892236Z","shell.execute_reply.started":"2024-04-22T15:05:41.677155Z","shell.execute_reply":"2024-04-22T15:05:41.890887Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Class', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"neg, pos = np.bincount(y_resampled)\ntotal = neg + pos\nprint('Examples:\\n    Total: {}\\n    Positive: {} ({:.2f}% of total)\\n'.format(\n    total, pos, 100 * pos / total))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.893617Z","iopub.execute_input":"2024-04-22T15:05:41.893987Z","iopub.status.idle":"2024-04-22T15:05:41.900428Z","shell.execute_reply.started":"2024-04-22T15:05:41.893957Z","shell.execute_reply":"2024-04-22T15:05:41.899219Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Examples:\n    Total: 1018\n    Positive: 509 (50.00% of total)\n\n","output_type":"stream"}]},{"cell_type":"code","source":"for feature in [col.strip() for col in X_resampled.select_dtypes(\"category\")]:\n    X_resampled[feature] = X_resampled[feature].cat.codes\n    X_resampled[feature] = X_resampled[feature].apply(np.uint8)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.90174Z","iopub.execute_input":"2024-04-22T15:05:41.902698Z","iopub.status.idle":"2024-04-22T15:05:41.957383Z","shell.execute_reply.started":"2024-04-22T15:05:41.902665Z","shell.execute_reply":"2024-04-22T15:05:41.956021Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"features = ['Alpha', 'Beta', 'Gamma', 'Delta']\nfor f in features:\n    corr_val = y.corr(X_resampled[f])\n    print(f\"{f}: {corr_val}\")","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.958772Z","iopub.execute_input":"2024-04-22T15:05:41.959504Z","iopub.status.idle":"2024-04-22T15:05:41.974136Z","shell.execute_reply.started":"2024-04-22T15:05:41.95947Z","shell.execute_reply":"2024-04-22T15:05:41.972787Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Alpha: 0.8732536411954871\nBeta: -0.26924310482774816\nGamma: -0.7806629775862098\nDelta: 0.09334813281755332\n","output_type":"stream"}]},{"cell_type":"code","source":"# print(X_resampled[X_resampled.Class == 1].shape[0])\n# print(X_resampled[X_resampled.Class == 0].shape[0])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.97538Z","iopub.execute_input":"2024-04-22T15:05:41.975837Z","iopub.status.idle":"2024-04-22T15:05:41.981019Z","shell.execute_reply.started":"2024-04-22T15:05:41.975797Z","shell.execute_reply":"2024-04-22T15:05:41.979803Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def group(X, y, groups):\n    sgkf = StratifiedGroupKFold(n_splits=5, random_state=0, shuffle=True)\n    for i, (train_index, valid_index) in enumerate(sgkf.split(X, y, groups)):\n        \n        if i != 3:\n            continue\n            \n        print(f\"Fold {i}:\")\n        print(f\"  Train len= {len(train_index)}\")\n        ones_t = X_resampled.loc[train_index, 'Class'].sum()\n        zeros_t = X_resampled.loc[train_index, 'Class'].shape[0] - ones_t\n        \n        print(f'L-1= {ones_t}, L-0= {zeros_t}\\n')\n\n\n        print(f\"  Valid len= {len(valid_index)}\")\n        ones_v = X_resampled.loc[valid_index, 'Class'].sum()\n        zeros_v = X_resampled.loc[valid_index, 'Class'].shape[0] - ones_v\n        \n        print(f'L-1= {ones_v}, L-0= {zeros_v}\\n')\n\n        return train_index, valid_index\n\ntrain_index, valid_index = group(X_resampled, y_resampled, X_resampled['Gamma'])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:41.982337Z","iopub.execute_input":"2024-04-22T15:05:41.982656Z","iopub.status.idle":"2024-04-22T15:05:42.00344Z","shell.execute_reply.started":"2024-04-22T15:05:41.98263Z","shell.execute_reply":"2024-04-22T15:05:42.00223Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Fold 3:\n  Train len= 907\nL-1= 462.0, L-0= 445.0\n\n  Valid len= 111\nL-1= 47.0, L-0= 64.0\n\n","output_type":"stream"}]},{"cell_type":"code","source":"X = X_resampled.iloc[:, 1:-5]\nX_train = X.iloc[train_index]\ny_train = X_resampled.iloc[train_index].loc[:,'Class']\n\nX_val = X.iloc[valid_index]\ny_val = X_resampled.iloc[valid_index].loc[:,'Class']","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:42.006259Z","iopub.execute_input":"2024-04-22T15:05:42.006628Z","iopub.status.idle":"2024-04-22T15:05:42.019438Z","shell.execute_reply.started":"2024-04-22T15:05:42.006599Z","shell.execute_reply":"2024-04-22T15:05:42.018275Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"class D:    \n    def label_encode(self):\n        for feature in self.df.select_dtypes(\"category\"):\n            self.df[feature] = self.df[feature].cat.codes\n            self.df[feature] = self.df[feature].apply(np.uint8)\n\n    def imputation(self):\n        imputer = IterativeImputer(missing_values=np.nan,random_state=0,n_nearest_features=3,max_iter=1,sample_posterior=True,)\n        df_imp = imputer.fit_transform(self.df)\n        self.df = pd.DataFrame(df_imp, columns=self.df.columns)\n    \n    def group(groups):\n        sgkf = StratifiedGroupKFold(n_splits=5, random_state=0, shuffle=True)\n        for i, (train_index, valid_index) in enumerate(sgkf.split(X, y, self.df['Gamma'])):\n            if i != 3:\n                continue\n            self.train= self.df.iloc[train_index]\n            self.valid= self.df.iloc[valid_index]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:42.020913Z","iopub.execute_input":"2024-04-22T15:05:42.021369Z","iopub.status.idle":"2024-04-22T15:05:42.030157Z","shell.execute_reply.started":"2024-04-22T15:05:42.021337Z","shell.execute_reply":"2024-04-22T15:05:42.029101Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"class Dataset:\n    def __init__(self, df: pd.DataFrame):\n        label = 'Class'\n        self.df = df.drop(columns=label)\n        self.y = df[label]\n        self.train = pd.DataFrame()\n        self.valid = pd.DataFrame()\n        self.num_cols = [col.strip() for col in self.df.select_dtypes(\"number\")]\n        self.cat_cols = [col.strip() for col in self.df.select_dtypes(\"category\")]\n\n        # self.df[\"EJ\"] = self.df.EJ.map({\"A\":0, \"B\":1}).astype('int')\n        # self.df[\"EJ\"] = self.df[\"EJ\"].astype('category')\n        self.n_splits = 5\n        \n    def imputation(self):\n        imputer = IterativeImputer(missing_values=np.nan,random_state=0,n_nearest_features=3,max_iter=1,sample_posterior=True,)\n        df_imp = imputer.fit_transform(self.df[self.num_cols])\n        return df_imp\n        \n    def setup(self):       \n        # self.df = pd.DataFrame(imputation(), columns=self.df.columns)\n        self.df = pd.concat([pd.DataFrame(imputation(), columns=self.num_cols), \n                                 self.df[self.cat_cols]], axis=1)\n        #imputation   \n#         imputer = IterativeImputer(missing_values=np.nan,random_state=0,n_nearest_features=3,max_iter=1,sample_posterior=True,)\n\n#         df_imp = imputer.fit_transform(self.df[self.num_cols])\n#         self.df = pd.concat([pd.DataFrame(df_imp, columns=self.num_cols), \n#                              self.df[self.cat_cols]], axis=1)\n        \n        #label encoding\n        for feature in self.cat_cols:\n            self.df[feature] = self.df[feature].cat.codes\n            self.df[feature] = self.df[feature].apply(np.uint8)\n        \n        #oversampling\n        ros = RandomOverSampler(random_state=0)\n        self.X_resampled, self.y_resampled = ros.fit_resample(self.df, self.y)\n        # self.X_resampled['Class'] = self.y_resampled       \n\n                \n        #group split\n#         sgkf = StratifiedGroupKFold(n_splits=self.n_splits, random_state=0, shuffle=True)\n#         for i, (train_index, valid_index) in enumerate(sgkf.split(self.X_resampled, self.y_resampled, self.X_resampled['Gamma'])):\n#             if i != 3:\n#                 continue\n#             self.train= self.df.iloc[train_index]\n#             self.valid= self.df.iloc[valid_index]\n            \n        ","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:42.031552Z","iopub.execute_input":"2024-04-22T15:05:42.032036Z","iopub.status.idle":"2024-04-22T15:05:42.049161Z","shell.execute_reply.started":"2024-04-22T15:05:42.032002Z","shell.execute_reply":"2024-04-22T15:05:42.047858Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"# greeeks_cols = ['Id','Alpha', 'Beta', 'Gamma', 'Delta']\n# df_merged = pd.merge(train_df, greeks_df[greeeks_cols].astype(\"category\"), how='left', on='Id')\n\n# dataset = Dataset(df_merged)\n# X_resampled, y_resampled = dataset.X_resampled, dataset.y_resampled","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:42.050613Z","iopub.execute_input":"2024-04-22T15:05:42.050976Z","iopub.status.idle":"2024-04-22T15:05:42.06542Z","shell.execute_reply.started":"2024-04-22T15:05:42.050946Z","shell.execute_reply":"2024-04-22T15:05:42.064219Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"%%time\n# map labels from {-1, 1} to {0, 1}\nlabels, y = np.unique(y, return_inverse=True)\n\noriginal_params = {\n    \"n_estimators\": 400,\n    \"max_leaf_nodes\": 4,\n    \"max_depth\": None,\n    \"random_state\": 0,\n    \"min_samples_split\": 5,\n}\n\nplt.figure()\nmodels = []\nfor label, color, setting in [\n    (\"No shrinkage\", \"orange\", {\"learning_rate\": 1.0, \"subsample\": 1.0}),\n    (\"learning_rate=0.2\", \"turquoise\", {\"learning_rate\": 0.2, \"subsample\": 1.0}),\n    (\"subsample=0.5\", \"blue\", {\"learning_rate\": 1.0, \"subsample\": 0.5}),\n    (\"learning_rate=0.2, subsample=0.5\",\"gray\",{\"learning_rate\": 0.2, \"subsample\": 0.5},),\n    (\"learning_rate=0.2, max_features=5\",\"magenta\",{\"learning_rate\": 0.2, \"max_features\": 5},),]:\n    \n    params = dict(original_params)\n    params.update(setting)\n\n    clf = GradientBoostingClassifier(**params)\n    clf.fit(X_train, y_train)\n    models.append(clf)\n    # compute test set deviance\n    test_deviance = np.zeros((params[\"n_estimators\"],), dtype=np.float64)\n\n    for i, y_proba in enumerate(clf.staged_predict_proba(X_val)):\n        test_deviance[i] = 2 * log_loss(y_val, y_proba[:, 1])\n\n    plt.plot(\n        (np.arange(test_deviance.shape[0]) + 1)[::5],\n        test_deviance[::5],\n        \"-\",\n        color=color,\n        label=label,\n    )\n\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"Boosting Iterations\")\nplt.ylabel(\"Test Set Deviance\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:42.067187Z","iopub.execute_input":"2024-04-22T15:05:42.06765Z","iopub.status.idle":"2024-04-22T15:05:57.710154Z","shell.execute_reply.started":"2024-04-22T15:05:42.067611Z","shell.execute_reply":"2024-04-22T15:05:57.70904Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"CPU times: user 15.7 s, sys: 161 ms, total: 15.8 s\nWall time: 15.6 s\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:57.711361Z","iopub.execute_input":"2024-04-22T15:05:57.711786Z","iopub.status.idle":"2024-04-22T15:05:57.745789Z","shell.execute_reply.started":"2024-04-22T15:05:57.711752Z","shell.execute_reply":"2024-04-22T15:05:57.744697Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"      EJ        AB          AF          AH         AM         AR        AX  \\\n0      1  0.209377  3109.03329   85.200147  22.394407   8.138688  0.699861   \n1      0  0.145282   978.76416   85.200147  36.968889   8.138688  3.632190   \n2      1  0.470030  2635.10654   85.200147  32.360553   8.138688  6.732840   \n3      1  0.252107  3819.65177  120.201618  77.112203   8.138688  3.685344   \n5      0  0.209377  2615.81430   85.200147   8.541526   8.138688  4.013127   \n...   ..       ...         ...         ...        ...        ...       ...   \n1012   1  0.286291  7057.21852   85.200147  10.031183  16.730982  3.791652   \n1013   0  0.730683  1070.72900  123.223641  36.470272   8.138688  4.597821   \n1014   1  0.282018  4088.00436   85.200147  15.763730   8.138688  4.119435   \n1015   1  0.311929  6761.63851   85.200147  21.960827   8.138688  6.139287   \n1016   1  0.726410  7720.75106   85.200147  32.595925   8.138688  7.042905   \n\n            AY         AZ        BC  ...         FI         FL       FR  \\\n0     0.025578   9.812214  5.555634  ...   3.583450   7.298162  1.73855   \n1     0.025578  13.517790  1.229900  ...  10.358927   0.173229  0.49706   \n2     0.025578  12.824570  1.229900  ...  11.626917   7.709560  0.97556   \n3     0.025578  11.053708  1.229900  ...  14.852022   6.122162  0.49706   \n5     0.025578  12.547282  1.229900  ...  10.981896   0.173229  0.49706   \n...        ...        ...       ...  ...        ...        ...      ...   \n1012  0.025578  10.593662  4.016502  ...   6.797529   7.044964  1.15739   \n1013  0.025578  15.698282  1.229900  ...   9.548516   0.173229  1.32936   \n1014  0.035931  11.116728  6.827702  ...  11.946671   8.854054  1.80612   \n1015  0.025578  30.192882  5.857838  ...   8.864904  11.152924  1.71013   \n1016  0.025578  11.305788  3.833774  ...   6.439184   5.315520  0.49706   \n\n            FS         GB         GE            GF         GH          GI  \\\n0     0.094822  11.339138  72.611063   2003.810319  22.136229   69.834944   \n1     0.568932   9.292698  72.611063  27981.562750  29.135430   32.131996   \n2     1.198821  37.077772  88.609437  13676.957810  28.022851   35.192676   \n3     0.284466  18.529584  82.416803   2094.262452  39.948656   90.493248   \n5     1.164956  21.915512  72.611063  24177.595550  28.525186   82.527764   \n...        ...        ...        ...           ...        ...         ...   \n1012  0.399607  18.501678  72.611063    840.636873  42.575682  129.477052   \n1013  0.067730  41.700866  72.611063  21042.911590  18.459881   25.727716   \n1014  0.352196  13.906490  72.611063   3814.711929  34.408087  119.657156   \n1015  0.115141  55.691074  72.611063  12082.383310  25.325126  157.079756   \n1016  2.614378  10.381032  72.611063   3197.544903  29.898235   10.190264   \n\n             GL  \n0      0.120343  \n1     21.978000  \n2      0.196941  \n3      0.155829  \n5     21.978000  \n...         ...  \n1012   0.058626  \n1013  21.978000  \n1014   0.108563  \n1015   0.112655  \n1016   0.594000  \n\n[907 rows x 56 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>EJ</th>\n      <th>AB</th>\n      <th>AF</th>\n      <th>AH</th>\n      <th>AM</th>\n      <th>AR</th>\n      <th>AX</th>\n      <th>AY</th>\n      <th>AZ</th>\n      <th>BC</th>\n      <th>...</th>\n      <th>FI</th>\n      <th>FL</th>\n      <th>FR</th>\n      <th>FS</th>\n      <th>GB</th>\n      <th>GE</th>\n      <th>GF</th>\n      <th>GH</th>\n      <th>GI</th>\n      <th>GL</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.209377</td>\n      <td>3109.03329</td>\n      <td>85.200147</td>\n      <td>22.394407</td>\n      <td>8.138688</td>\n      <td>0.699861</td>\n      <td>0.025578</td>\n      <td>9.812214</td>\n      <td>5.555634</td>\n      <td>...</td>\n      <td>3.583450</td>\n      <td>7.298162</td>\n      <td>1.73855</td>\n      <td>0.094822</td>\n      <td>11.339138</td>\n      <td>72.611063</td>\n      <td>2003.810319</td>\n      <td>22.136229</td>\n      <td>69.834944</td>\n      <td>0.120343</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0.145282</td>\n      <td>978.76416</td>\n      <td>85.200147</td>\n      <td>36.968889</td>\n      <td>8.138688</td>\n      <td>3.632190</td>\n      <td>0.025578</td>\n      <td>13.517790</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>10.358927</td>\n      <td>0.173229</td>\n      <td>0.49706</td>\n      <td>0.568932</td>\n      <td>9.292698</td>\n      <td>72.611063</td>\n      <td>27981.562750</td>\n      <td>29.135430</td>\n      <td>32.131996</td>\n      <td>21.978000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0.470030</td>\n      <td>2635.10654</td>\n      <td>85.200147</td>\n      <td>32.360553</td>\n      <td>8.138688</td>\n      <td>6.732840</td>\n      <td>0.025578</td>\n      <td>12.824570</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>11.626917</td>\n      <td>7.709560</td>\n      <td>0.97556</td>\n      <td>1.198821</td>\n      <td>37.077772</td>\n      <td>88.609437</td>\n      <td>13676.957810</td>\n      <td>28.022851</td>\n      <td>35.192676</td>\n      <td>0.196941</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0.252107</td>\n      <td>3819.65177</td>\n      <td>120.201618</td>\n      <td>77.112203</td>\n      <td>8.138688</td>\n      <td>3.685344</td>\n      <td>0.025578</td>\n      <td>11.053708</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>14.852022</td>\n      <td>6.122162</td>\n      <td>0.49706</td>\n      <td>0.284466</td>\n      <td>18.529584</td>\n      <td>82.416803</td>\n      <td>2094.262452</td>\n      <td>39.948656</td>\n      <td>90.493248</td>\n      <td>0.155829</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>0.209377</td>\n      <td>2615.81430</td>\n      <td>85.200147</td>\n      <td>8.541526</td>\n      <td>8.138688</td>\n      <td>4.013127</td>\n      <td>0.025578</td>\n      <td>12.547282</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>10.981896</td>\n      <td>0.173229</td>\n      <td>0.49706</td>\n      <td>1.164956</td>\n      <td>21.915512</td>\n      <td>72.611063</td>\n      <td>24177.595550</td>\n      <td>28.525186</td>\n      <td>82.527764</td>\n      <td>21.978000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1012</th>\n      <td>1</td>\n      <td>0.286291</td>\n      <td>7057.21852</td>\n      <td>85.200147</td>\n      <td>10.031183</td>\n      <td>16.730982</td>\n      <td>3.791652</td>\n      <td>0.025578</td>\n      <td>10.593662</td>\n      <td>4.016502</td>\n      <td>...</td>\n      <td>6.797529</td>\n      <td>7.044964</td>\n      <td>1.15739</td>\n      <td>0.399607</td>\n      <td>18.501678</td>\n      <td>72.611063</td>\n      <td>840.636873</td>\n      <td>42.575682</td>\n      <td>129.477052</td>\n      <td>0.058626</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>0</td>\n      <td>0.730683</td>\n      <td>1070.72900</td>\n      <td>123.223641</td>\n      <td>36.470272</td>\n      <td>8.138688</td>\n      <td>4.597821</td>\n      <td>0.025578</td>\n      <td>15.698282</td>\n      <td>1.229900</td>\n      <td>...</td>\n      <td>9.548516</td>\n      <td>0.173229</td>\n      <td>1.32936</td>\n      <td>0.067730</td>\n      <td>41.700866</td>\n      <td>72.611063</td>\n      <td>21042.911590</td>\n      <td>18.459881</td>\n      <td>25.727716</td>\n      <td>21.978000</td>\n    </tr>\n    <tr>\n      <th>1014</th>\n      <td>1</td>\n      <td>0.282018</td>\n      <td>4088.00436</td>\n      <td>85.200147</td>\n      <td>15.763730</td>\n      <td>8.138688</td>\n      <td>4.119435</td>\n      <td>0.035931</td>\n      <td>11.116728</td>\n      <td>6.827702</td>\n      <td>...</td>\n      <td>11.946671</td>\n      <td>8.854054</td>\n      <td>1.80612</td>\n      <td>0.352196</td>\n      <td>13.906490</td>\n      <td>72.611063</td>\n      <td>3814.711929</td>\n      <td>34.408087</td>\n      <td>119.657156</td>\n      <td>0.108563</td>\n    </tr>\n    <tr>\n      <th>1015</th>\n      <td>1</td>\n      <td>0.311929</td>\n      <td>6761.63851</td>\n      <td>85.200147</td>\n      <td>21.960827</td>\n      <td>8.138688</td>\n      <td>6.139287</td>\n      <td>0.025578</td>\n      <td>30.192882</td>\n      <td>5.857838</td>\n      <td>...</td>\n      <td>8.864904</td>\n      <td>11.152924</td>\n      <td>1.71013</td>\n      <td>0.115141</td>\n      <td>55.691074</td>\n      <td>72.611063</td>\n      <td>12082.383310</td>\n      <td>25.325126</td>\n      <td>157.079756</td>\n      <td>0.112655</td>\n    </tr>\n    <tr>\n      <th>1016</th>\n      <td>1</td>\n      <td>0.726410</td>\n      <td>7720.75106</td>\n      <td>85.200147</td>\n      <td>32.595925</td>\n      <td>8.138688</td>\n      <td>7.042905</td>\n      <td>0.025578</td>\n      <td>11.305788</td>\n      <td>3.833774</td>\n      <td>...</td>\n      <td>6.439184</td>\n      <td>5.315520</td>\n      <td>0.49706</td>\n      <td>2.614378</td>\n      <td>10.381032</td>\n      <td>72.611063</td>\n      <td>3197.544903</td>\n      <td>29.898235</td>\n      <td>10.190264</td>\n      <td>0.594000</td>\n    </tr>\n  </tbody>\n</table>\n<p>907 rows Ã— 56 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# TEST","metadata":{}},{"cell_type":"code","source":"test_df.drop('Id', axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:57.747603Z","iopub.execute_input":"2024-04-22T15:05:57.747987Z","iopub.status.idle":"2024-04-22T15:05:57.754644Z","shell.execute_reply.started":"2024-04-22T15:05:57.747956Z","shell.execute_reply":"2024-04-22T15:05:57.753239Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"test_df = test_df[['EJ'] + [col for col in test_df.columns if col != 'EJ']]\ntest_df","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:57.756629Z","iopub.execute_input":"2024-04-22T15:05:57.757082Z","iopub.status.idle":"2024-04-22T15:05:57.795932Z","shell.execute_reply.started":"2024-04-22T15:05:57.757051Z","shell.execute_reply":"2024-04-22T15:05:57.794502Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"  EJ   AB   AF   AH   AM   AR   AX   AY   AZ   BC  ...   FI   FL   FR   FS  \\\n0  A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0   \n1  A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0   \n2  A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0   \n3  A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0   \n4  A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0   \n\n    GB   GE   GF   GH   GI   GL  \n0  0.0  0.0  0.0  0.0  0.0  0.0  \n1  0.0  0.0  0.0  0.0  0.0  0.0  \n2  0.0  0.0  0.0  0.0  0.0  0.0  \n3  0.0  0.0  0.0  0.0  0.0  0.0  \n4  0.0  0.0  0.0  0.0  0.0  0.0  \n\n[5 rows x 56 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>EJ</th>\n      <th>AB</th>\n      <th>AF</th>\n      <th>AH</th>\n      <th>AM</th>\n      <th>AR</th>\n      <th>AX</th>\n      <th>AY</th>\n      <th>AZ</th>\n      <th>BC</th>\n      <th>...</th>\n      <th>FI</th>\n      <th>FL</th>\n      <th>FR</th>\n      <th>FS</th>\n      <th>GB</th>\n      <th>GE</th>\n      <th>GF</th>\n      <th>GH</th>\n      <th>GI</th>\n      <th>GL</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 56 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df['EJ'] = test_df['EJ'].cat.codes\ntest_df['EJ'] = test_df['EJ'].apply(np.uint8)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:57.79815Z","iopub.execute_input":"2024-04-22T15:05:57.798497Z","iopub.status.idle":"2024-04-22T15:05:57.805483Z","shell.execute_reply.started":"2024-04-22T15:05:57.798468Z","shell.execute_reply":"2024-04-22T15:05:57.80405Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"pres = models[len(models)-1].predict_proba(test_df.iloc[:,:])\n\nclass_0 = []\nclass_1 = []\nfor pre_vals in pres:\n    class_0.append(pre_vals[0])\n    class_1.append(pre_vals[1])\n    \nsubmission = all_data[\"sample_submission\"]\nsubmission['class_0'] = class_0\nsubmission['class_1'] = class_1","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:05:57.807127Z","iopub.execute_input":"2024-04-22T15:05:57.807856Z","iopub.status.idle":"2024-04-22T15:05:57.820305Z","shell.execute_reply.started":"2024-04-22T15:05:57.807813Z","shell.execute_reply":"2024-04-22T15:05:57.819086Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"submission.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T15:07:00.844298Z","iopub.execute_input":"2024-04-22T15:07:00.84479Z","iopub.status.idle":"2024-04-22T15:07:00.853571Z","shell.execute_reply.started":"2024-04-22T15:07:00.844758Z","shell.execute_reply":"2024-04-22T15:07:00.852466Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}